	title	"7segment"
	list	p=16F84A
	radix	HEX
	Include	"p16F84A.inc"
MODE	EQU	d'12'
COUNT1	EQU	d'13'
COUNT2	EQU	d'14'
COUNT3	EQU	d'15'
M1	EQU	d'16'
M2	EQU	d'17'
M3	EQU	d'18'
M4	EQU	d'19'
M5	EQU	d'20'
M6	EQU	d'21'
M7	EQU	d'22'
M8	EQU	d'23'
M9	EQU	d'24'
M10	EQU	d'25'
M11	EQU	d'26'
M12	EQU	d'27'
M13	EQU	d'28'
M14	EQU	d'29'
M15	EQU	d'30'
M16	EQU	d'31'
M17	EQU	d'32'
M18	EQU	d'33'
M19	EQU	d'34'
M20	EQU	d'35'
CURSORLOC	EQU	D'36'
STARTLOC	EQU	D'37'
STARTFSR	EQU	D'38'
ITR1	EQU	D'39'
ITR2	EQU	D'40'
OBS	equ	d'41'
OBSTEMP	equ	d'42'
OBSCOUNT	EQU	D'43'
REGLOC	EQU	D'44'
COUNTTIME	EQU	D'45'
OBS2	EQU	D'46'
TEMP	EQU	D'47'
SE	EQU	D'48'
REMAININGOBS	EQU	D'49'
DONEALG	EQU	D'50'

;	Part A / B : initialization
	ORG	0x0
	GOTO	MAIN1
	ORG	0x04
	
	BTFSC	INTCON,RBIF
	GOTO	ARBI
	
	BTFSC	INTCON, T0IF
	GOTO	TMRZERO

MAIN1	
	BSF	STATUS,RP0
	;==== SETTING THE INPUTS AND THE OUTPUTS ======
	CLRF	TRISA
	BSF	TRISB,4
	BSF	TRISB,5
	BSF	TRISB,6
	BSF	TRISB,7
	BCF	TRISB,0
	BCF	TRISB,1
	BCF	TRISB,2
	BCF	TRISB,3
	;====
	
	;==== ENABLING INTERRUPTS
	MOVLW	B'10000111'
	MOVWF	OPTION_REG
	;====
	
	;==== SWITCHING BACK THE BANK
	BCF	STATUS,RP0
	CLRF	PORTA
	CLRF	PORTB
	;===
	

	;==== DISPLAY SETUP
	Call	DELAY1
	MOVLW	B'00010'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'00010'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'01000'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'00000'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'01100'
	MOVWF	PORTA
	Call	ET
	CALL	CLEARDISP
	MOVLW	B'00000'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'00110'
	MOVWF	PORTA
	Call	ET
	;=======
	
	
MAIN
	;==== CLEARING THE F REGISTERS USING THE FSR 
	MOVLW	10
	MOVWF	FSR
NEXT
	CLRF	INDF
	INCF	FSR,F
	BTFSS	FSR,6
	GOTO	NEXT
	;====
	
	;====	MAKING SURE THAT THE LEDS ARE OFF (IN CASE WE ARE COMING BACK FROM THE ALGORITHM)
	
	BCF	PORTB,2
	BCF	PORTB,3
	;======
	
	
	CLRF	DONEALG ; CLEARING THE ALGORITHM FLAG
	CALL	BLINKOFF
	
	;====	PRINTING THE WELCOME SCREEN
	MOVLW	B'00101000';adress 02
	CALL	SETADD
	CALL	MAZE		;"MAZE"
	CALL	CLEARCHAR	;" "
	CALL	SPRINT		;"S"
	CALL	OPRINT		;"O"
	MOVLW	B'11000100';"L"
	CALL	PRINT
	MOVLW	B'01100101';"V"
	CALL	PRINT
	CALL	EPRINT
	MOVLW	B'00100101';"R"
	CALL	PRINT
	;====

	CALL	DELAY4	;DELAY TO MAKE SURE THE WELCOME SCREEN IS STILL DIPLAYED
	CALL	CLEARDISP	;CLEAR DIPLAY TO ACCESS MAIN MENU


	;=== MAIN MENU
		;==== PRINTING THE MAIN MENU
	MOVLW	B'01001000';position at address 04
	CALL	SETADD
	MOVLW	B'01000100';"D"
	CALL	PRINT
	CALL	EPRINT
	MOVLW	B'01100100';"F"
	CALL	PRINT  
	CALL	APRINT
	MOVLW	B'01010101';"U"
	CALL	PRINT
	MOVLW	B'11000100';"L"
	CALL	PRINT
	MOVLW	B'01000101';"T"
	CALL	PRINT
	MOVLW	B'00011100';position at address 41
	CALL	SETADD
	CALL	OPRINT
	MOVLW	B'00100100';"B"
	CALL	PRINT
	CALL	SPRINT
	MOVLW	B'01000101';"T"
	CALL	PRINT
	CALL	APRINT	
	MOVLW	B'00110100';"C"
	CALL	PRINT
	MOVLW	B'11000100';"L"
	CALL	PRINT 
	CALL	EPRINT
	MOVLW	B'10111100';position at adress 51
	CALL	SETADD
	CALL	MAZE
	MOVLW	B'00111000';position at adress 03
	CALL	SETADD
	CALL	PRINTPOINTER;"*"
		;=======
		
		;==== INITIAL MODE IS 1
	MOVLW	B'000000001'
	MOVWF	MODE
		;=====
	MOVLW	d'30'
	MOVWF	COUNTTIME	; INITIALIZING THE COUNTER OF TIMER0
	
		;==== RESETTING THE FLAGS OF THE INTERRUPTS 
	MOVLW	B'10001000'
	MOVWF	INTCON
		;====
	;====
	
	
INFLOOP	; KEEP THE DISPLAY WHILE WAITING WAITING FOR INTERRUPTS 
	BTFSC	DONEALG,0 ;CHECKING IF WE HAVE ALREADY RAN THE ALGORITHM, IF YES GO BACK TO THE WELCOME SCREEN AND RESTART THE MAZE SOLVER
	GOTO	MAIN
	GOTO	INFLOOP

		
	;==== RB INTERRUPTS 
ARBI
	CALL	DELAY2 
	CALL	DELAY2 ; CALLING THE DELAY 2 TWICE FOR DEBOUNCING 
	BTFSS	PORTB,4 ; CHECKING IF THE INPUT IS RB4
	GOTO	ARBI4
	BTFSS	PORTB,5 ; CHECKING IF THE INPUT IS RB5
	GOTO	ARBI5
	BTFSS	PORTB,6 ; CHECKING IF THE INPUT IS RB6
	GOTO	ARBI6
	BTFSS	PORTB,7 ; CHECKING IF THE INPUT IS RB7
	GOTO	ARBI7
	GOTO	RETRB
ARBI4
	BTFSC	MODE,0 ; IN CASE WE WERE IN MODE 1 (POINTER ON DEFAULT) GO TO MODE 2
	GOTO	MODE2
	BTFSC	MODE,1 ; IN CASE WE WERE IN MODE 2 (POINTER ON OBSTACLE) GO TO MODE 3
	GOTO	MODE3
	BTFSC	MODE,2 ; IN CASE WE WERE IN MODE 3 (POINTER ON MAZE) GO TO MODE 1
	GOTO	MODE1
	BTFSC	MODE,4 ; IN CASE WE WERE IN MODE 5 MOVE THE OBSTACLE CURSOR (AFTER ENTERRING OBSTACLE MODE)
	GOTO	MOVEOBS
	GOTO	RETRB
ARBI5
	BTFSC	MODE,0 ; IN CASE WE WERE IN MODE 1 (POINTER ON DEFAULT) ENTER THE DEFAULT SUB MENU (MODE 4)
	GOTO	MODE4
	BTFSC	MODE,1 ; IN CASE WE WERE IN MODE 2 (POINTER ON OBSTACLE) ENTER THE OBSTACLE SUB MENU (MODE 5)
	GOTO	MODE5
	BTFSC	MODE,2 ; IN CASE WE WERE IN MODE 3 (POINTER ON MAZE) GO TO MODE 6 
	GOTO	MODE6
	
	BTFSC	MODE,3 ; DEFAULT -> SOLVE ALGORITHM
	GOTO	SETUPALG
	BTFSC	MODE,4 ; OBSTACLE -> PLACE OBSTACLE
	GOTO	PLACEOBS
	BTFSC	MODE,5 ; MAZE -> PLACE OBSTACLE MAZE 
	GOTO	PLACEOM
	GOTO	RETRB
ARBI6
	BTFSC	MODE,5 ; MAZE -> PLACE "S"
	GOTO	PLACES
	GOTO	RETRB
ARBI7
	BTFSC	MODE,5 ; MAZE -> PLACE "E"
	GOTO	PLACEE
	GOTO	RETRB

MODE1
	MOVLW	B'00000001' ; SETTING THE FIRST BIT OF MODE TO 1 (BETTER FOR COMPARISONS)
	MOVWF	MODE
	;==== REMOVING THE STAR POINTER FROM MAZE 
	MOVLW	B'10101100'  
	CALL	SETADD
	CALL	CLEARCHAR
	;========
	;=== PRINT POINTER ON DEFAULT
	MOVLW	B'00111000'
	CALL	SETADD
	CALL	PRINTPOINTER
	GOTO	RETRB
	
	
	;=== SIMILAR TO MODE1 
MODE2 
	MOVLW	B'00000010'
	MOVWF	MODE
	MOVLW	B'00111000'
	CALL	SETADD
	CALL	CLEARCHAR
	MOVLW	B'00001100'
	CALL	SETADD
	CALL	PRINTPOINTER
	GOTO	RETRB
MODE3
	MOVLW	B'00000100'
	MOVWF	MODE
	MOVLW	B'00001100'
	CALL	SETADD
	CALL	CLEARCHAR
	MOVLW	B'10101100'
	CALL	SETADD
	CALL	PRINTPOINTER
	GOTO	RETRB
	;===========
	
	
	
MODE4
;PRINT THE DEFAULT SETUP 
	MOVLW	B'00001000'
	MOVWF	MODE		;UPDATE MODE
	CALL	CLEARDISP
	CALL	BLINKON
	CALL	FILLDASH ;FILLS ALL REGISTERS WITH DASHES
	MOVLW	B'11111111'; PLACE OBSTACLES IN THEIR RIGHT REGISTERS
	MOVWF	M1
	MOVWF	M12
	MOVWF	M14
	MOVWF	M15
	MOVWF	M19
	MOVWF	M20
	MOVLW	B'00110101' ; PLACE START 
	MOVWF	M6
	MOVLW	B'01010100' ; PLACE END
	MOVWF	M11
	BSF	PORTB,2 ; TURNING ON LED 
	CALL	PRINTDISP ; PRINT THE CONENT OF THE REGISTERS IN THEIR RESPECTIVE POSITIONS 
	MOVLW	H'58'
	CALL	SETADD ; SET THE CURSOR TO THE START POINT 
	GOTO	RETRB
	
	;===== MODE 5 (OBSTACLE MODE) 
MODE5 
	MOVLW	B'00010000'
	MOVWF	MODE		;UPDATE MODE
	CALL	CLEARDISP
	CALL	BLINKON
	;OBSTACLE
	CALL	FILLDASH
	MOVLW	B'00110101' ; SET "S"
	MOVWF	M1
	MOVLW	B'01010100' ; SET "E" 
	MOVWF	M20
	CALL	PRINTDISP ;
	; PRINT "S@ 0,0" AT LOCATION 0C 
	MOVLW	H'C8'
	CALL	SETADD 
	CALL	SPRINT
	CALL	CLEARCHAR
	MOVLW	B'00000100';"@"
	CALL	PRINT	
	MOVLW	H'CC';NEXT LINE 
	CALL	SETADD
	MOVLW	B'00000011';"0"
	CALL	PRINT
	MOVLW	B'11000010';""
	CALL	PRINT
	MOVLW	B'00000011';"0"
	CALL	PRINT
	MOVLW	B'00011000'
	CALL	SETADD
	;====LOCATION OF FSR
	MOVLW	D'17'
	MOVWF	REGLOC
	;======
	;=== 
	MOVLW	B'00000001'
	MOVWF	OBS
	BSF	PORTB,3	;TURNING ON LED
	GOTO	RETRB
	;=== MAZE MODE
MODE6
	MOVLW	B'00100000'
	MOVWF	MODE		;UPDATE MODE
	CALL	CLEARDISP
	MOVLW	B'00001000'
	CALL	SETADD
	CALL	BLINKON
	;MAZE
	CALL	FILLDASH
	CALL	PRINTDISP
	;==OBSTACLE REMAINING 0
	MOVLW	H'C8'
	CALL	SETADD
	CALL	OPRINT ;"O"
	MOVLW	B'00100100';"B"
	CALL	PRINT
	CALL	SPRINT
	MOVLW	H'BC'
	CALL	SETADD
	MOVLW	B'00100101';"R"
	CALL	PRINT
	CALL	EPRINT
	MOVLW	B'11010100';M
	CALL	PRINT
	CALL	CLEARCHAR
	MOVLW	B'01010011';"5"
	MOVWF	REMAININGOBS ;CONTAINS CHARACTER CODE OF DIGIT
	CALL	PRINT	
	MOVLW	D'16' ;FSR TO FIRST REGISTER
	MOVWF	FSR
	MOVLW	B'00001000' ;MOVE CURSOR TO THE FIRST LOCATION
	CALL	SETADD
	MOVLW	08
	MOVWF	CURSORLOC	;UPDATE CURSORLOC
	;TURN ON BOTH LEDS
	BSF	PORTB,2
	BSF	PORTB,3
	BSF	INTCON,5 ;ENABLE TIMER ZERO INTERRUPT
	GOTO	RETRB	
	
	
	;=========
MOVEOBS
	MOVF	OBS,W
	MOVWF	OBSTEMP
	MOVF	OBS,W
	SUBLW	d'09'
	BTFSC	STATUS,Z ;IF WE ARE AT THE LAST ONE ON THE FIRST LINE GO TO THE SECOND LINE
	GOTO	ADDRESS17
	MOVF	OBS,W
	SUBLW	d'18'
	BTFSC	STATUS,Z
	GOTO	SETUPALG	;IF WE ARE AT THE FIRST CHARCATER OF TEH SECOND LINE WE RI=UN ALGORITHM
	MOVF	OBS,W
	MOVLW	d'09'
	SUBWF	OBS,F
	MOVF	OBS,W
	MOVWF	OBS2
	BTFSC	OBS2,7 ;IF WE ARE ON THE FIRST LINE MOVE RIGHT
	CALL	SHIFTRIGHT
	BTFSS	OBS2,7 ;IF WE ARE ON THE FIRST LINE MOVE RIGHT
	CALL	SHIFTLEFT
	GOTO	RETRB
PLACEOBS
	MOVF	REGLOC,W
	MOVWF	FSR
	MOVLW	B'11111111' ;PLACE OBSTACLE IN MEMORY
	MOVWF	INDF
	CALL	PRINT ; PRINT OBSTACLE
	INCF	OBSCOUNT,F ;INCREMENT OBSTACLE COUNT
	CALL	CURSORLEFT ; MOVE CURSOR BACK TO THE LEFT BECAUSE PRINTING MOVE IT RIGHT
	MOVLW	D'5'
	SUBWF	OBSCOUNT,W
	BTFSC	STATUS,Z ;CHECK IF WE HAVE FIVE OBSTACLE IF YES GO TO ALGORITHM
	GOTO	SETUPALG
	GOTO	MOVEOBS
SHIFTLEFT ;CURSOR SHIFT AND UPDATE REGLOC
	CALL	CURSORLEFT
	MOVF	OBSTEMP,W
	ADDLW	b'1'
	MOVWF	OBS
	DECF	REGLOC,F
	RETURN
SHIFTRIGHT ;CURSOR SHIFT AND UPDATE REGLOC
	CALL	CURSORRIGHT
	MOVF	OBSTEMP,W
	ADDLW	b'1'
	MOVWF	OBS
	INCF	REGLOC,F
	RETURN
ADDRESS17 ;ADDRES OF THE SECOND TO LAST REGISTER
	MOVLW	8C
	CALL	SETADD
	MOVF	OBSTEMP,W
	ADDLW	b'1'
	MOVWF	OBS
	MOVLW	D'34'
	MOVWF	REGLOC
	GOTO	RETRB
	

		
TMRZERO

	DECFSZ	COUNTTIME,F 	; 2 sec delay
	GOTO	RETT0	
	MOVLW	d'30'
	MOVWF	COUNTTIME
	CLRF	TMR0
	
	MOVF	FSR,W
	SUBLW	D'25' ;	IF WE ARE ON THE END OF THE FIRST LINE GO TO THE SECOND LINE
	BTFSC	STATUS,Z
	GOTO	DOWNLINE
	
	MOVF	FSR,W
	SUBLW	D'26'	;IF WE ARE ON THE START OF THE FIRST LINE GO TO THE FIRST LINE
	BTFSC	STATUS,Z
	GOTO	UPLINE
	
	MOVLW	D'25'
	SUBWF	FSR,W
	MOVWF	TEMP
	BTFSC	TEMP,7 ;IF WE ARE ON THE FIRST LINE GO RIGHT
	GOTO	LINE1T
	
	MOVLW	D'26'
	SUBWF	FSR,W
	MOVWF	TEMP
	BTFSS	TEMP,7 ;IF WE ARE ON THE SECOND LINE GO  LEFT
	GOTO	LINE2T

DOWNLINE	;GO DOWN IF WE REACH END OF FIRST LINE, UPDATE FSR TO 35 AND CURSOR LOC
	MOVLW	9C
	MOVWF	CURSORLOC
	CALL	SETADD
	MOVLW	D'35'
	MOVWF	FSR
	GOTO	RETT0
UPLINE		;GO UP IF WE REACH THE BEGINNING OF SECOND LINE, UPDATE FSR TO 16 AND CURSOR LOC
	MOVLW	08
	MOVWF	CURSORLOC
	CALL	SETADD
	MOVLW	D'16'
	MOVWF	FSR
	GOTO	RETT0
LINE1T		;GO RIGHT IF WE ARE ON THE FIRST LINE, INCREMENT FSR AND CURSOR LOC
	INCF	FSR,F
	CALL	CURSORLOCINC
	GOTO	RETT0
LINE2T		;GO LEFT IF WE ARE ON THE SECOND LINE, DECREMENT FSR AND CURSOR LOC
	DECF	FSR,F
	CALL	CURSORLOCDEC
	GOTO	RETT0
	
PLACEOM
	MOVF	INDF,W
	SUBLW	B'11110101'
	BTFSS	STATUS,Z	;CHECK IS THE LOCATION IS EMPTY
	GOTO	BUZZER		;IF NOT EMPTY GOTO BUZZER
	MOVLW	D'5'		
	SUBWF	OBSCOUNT,W	
	BTFSC	STATUS,Z	;CHECK IF WE HAVE ALREADY FIVE OBSTACLES
	GOTO	BUZZER
	MOVLW	B'11111111'
	MOVWF	INDF
	CALL	PRINT		;PRINT OBSTACLE
	INCF	OBSCOUNT,F	;INCREASE OBSTACLE COUNT
	MOVLW	10
	SUBWF	REMAININGOBS,1	;DECREMENT REMAININGOBS BY 16 (BECAUSE WE ARE CHANGING CODES FOR CHARACTER PRINTING)
	MOVLW	H'FC'
	CALL	SETADD	
	MOVF	REMAININGOBS,W
	CALL	PRINT			;PRINT REMAINING OBSTACLE
	MOVF	CURSORLOC,W
	CALL	SETADD
	MOVLW	D'5'
	SUBWF	OBSCOUNT,W
	BTFSS	STATUS,Z	;IF OBSTACLE COUNT IS 5 (WE PLACED LAST OBSTACLE) 
	GOTO	RETRB
	MOVLW	D'3'
	SUBWF	SE,W
	BTFSC	STATUS,Z	;CHECK IS S AND E HAVE BEEN PLACED
	GOTO	SETUPALG	;GOTO ALGORITHM
	GOTO	RETRB
	
PLACES
	MOVF	INDF,W
	SUBLW	B'11110101'
	BTFSS	STATUS,Z	;CHECK IF IT IS EMPTY
	GOTO	BUZZER		;IF NOT EMPTY GOTO BUZZER
	BTFSC	SE,0		;IF S HAS ALREADY BEEN PLACED GOTO BUZZER
	GOTO	BUZZER
	MOVLW	B'00110101'	;UPDATE S IN MEMORY
	MOVWF	INDF		
	CALL	PRINT		;PRINT S
	CALL	CURSORLEFT	;MOVE BACK CURSOR TO LEFT BECAUSE PRINT MOVES CURSOR RIGHT
	BCF	PORTB,2			;TURN OFF LED
	BSF	SE,0			;MARK THAT S HAS BEEN PLACED
	BTFSC	SE,1		;CHECK IF ALSO E HAS BEEN PLACED
	GOTO	CHECKOBS	;IF YES CHECK OBSTACLES	
	GOTO	RETRB


PLACEE
	MOVF	INDF,W
	SUBLW	B'11110101'
	BTFSS	STATUS,Z	;CHECK IF IT IS EMPTY
	GOTO	BUZZER		;IF NOT EMPTY GOTO BUZZER
	BTFSC	SE,1		;IF E HAS ALREADY BEEN PLACED GOTO BUZZER
	GOTO	BUZZER
	MOVLW	B'01010100'	;UPDATE E IN MEMORY
	MOVWF	INDF
	CALL	PRINT		;PRINT E
	CALL	CURSORLEFT	;MOVE BACK CURSOR TO LEFT BECAUSE PRINT MOVES CURSOR RIGHT
	BSF	SE,1			;MARK THAT E HAS BEEN PLACED
	BCF	PORTB,3			;TURN OFF LED
	BTFSC	SE,0		;CHECK IF ALSO E HAS BEEN PLACED
	GOTO	CHECKOBS	;IF YES CHECK OBSTACLES
	GOTO	RETRB

CHECKOBS
	MOVLW	D'5'		
	SUBWF	OBSCOUNT,W
	BTFSC	STATUS,Z	;CHECK IF FIVE OBSTACLES HAVE BEEN PLACED
	GOTO	SETUPALG	;IF YES GOTO ALGORITHM
	GOTO	RETRB
BUZZER
	BSF	PORTB,0			;TURN ON BUZZER
	CALL	DELAY1
	BCF	PORTB,0			;TURN OFF BUZZER
	GOTO	RETRB
	
	
	
SETUPALG
	MOVLW	B'00010011'	;ITR1 IS THE CHARACTER CODE OF THE UNITS DIGIT IN ITERATIONS
	MOVWF	ITR1
	MOVLW	B'00000011'	;ITR2 IS THE CHARACTER CODE OF THE TENS DIGIT IN ITERATIONS
	MOVWF	ITR2
	BCF	PORTB,2			;TURN OFF BOTH LEDS
	BCF	PORTB,3
	MOVLW	00			;DISBALE TIMER ITERRUPT
	MOVWF	INTCON
	CALL	CLEARDISP	;CLEAR DISPLAY
	CALL	PRINTDISP	;PRINT MAP FROM MEMORY
	CALL	ITRPRT		;PRINT ITERATION COUNT
	MOVLW	08			;INITIAL CURSORLOC AT 00
	MOVWF	CURSORLOC	
	CALL	SETADD
	MOVLW	10			;INITIAL FSR AT 16
	MOVWF	FSR
LOOPSTART
	MOVLW	B'00110101'	;"S" CHARACTER CODE
	SUBWF	INDF,W
	BTFSC	STATUS,Z	;CHECK IF CHARACTER IN MEMORY IS "S"
	GOTO	START		;IF YES START
	INCF	FSR,F		;INCREMENT FSR
	CALL	CURSORLOCINC	;UPDATE CUROSR LOC
	MOVLW	h'A8'			
	SUBWF	CURSORLOC,W	
	BTFSC	STATUS,Z		;IF WE ARE A THE END OF THE FIRST 
	GOTO	LOOP2START		;MOVE TO THE SECOND PART OF THE LOOP
	GOTO	LOOPSTART
LOOP2START
	MOVLW	0C				;SET CURSORLOC AS THE FIRST CHARACTER OF THE SECOND LINE
	MOVWF	CURSORLOC
	CALL	SETADD
LOOPSTART2
	MOVLW	B'00110101'		;CHECK IS CHARACTER IS "S"
	SUBWF	INDF,W
	BTFSC	STATUS,Z
	GOTO	START			;IF YES START
	INCF	FSR,F
	CALL	CURSORLOCINC	;UPDATE CUROSR LOC
	GOTO	LOOPSTART2
START
	CALL	BLINKOFF
	MOVF	CURSORLOC,W		
	MOVWF	STARTLOC		;SAVE S LOCATION IN STARTLOC REGISTER
	MOVF	FSR,W
	MOVWF	STARTFSR		;SAVE S FSR IN STARTFSR REGISTER
	GOTO	CHECKRIGHT
RESTART		;RESTORE FSR AND CURSOR LOC FROM STARTFSR AND STARTLOC IN CASE WE ARE RE-RUNNING AFTER A BLOCK
	MOVF	STARTLOC,W		
	MOVWF	CURSORLOC
	CALL	SETADD
	MOVF	STARTFSR,W
	MOVWF	FSR
CHECKRIGHT
	INCF	FSR,F			;LOOKING RIGHT
	MOVLW	D'26'
	SUBWF	FSR,W
	BTFSC	STATUS,Z		;CHECK IF IT IS THE LAST POSTION OF  THE FIRST LINE
	GOTO	RIGHTTOLEFT		;IF IT IS GO CHECK LEFT
	MOVLW	D'36'
	SUBWF	FSR,W
	BTFSC	STATUS,Z		;CHECK IF IT IS THE LAST POSTION OF  THE SECOND LINE
	GOTO	RIGHTTOLEFT		;IF IT IS GO CHECK LEFT
	MOVLW	B'01010100'		
	SUBWF	INDF,W
	BTFSC	STATUS,Z		;CHECK IF THE RIGHT POSITION IS AN "E"
	GOTO	DONE			;IF IT IS THEN DONE
	MOVLW	B'11110101'
	SUBWF	INDF,W
	BTFSS	STATUS,Z		;CHECK IF IT IS EMPTY
	GOTO	RIGHTTOLEFT		;IF IT IS NOT EMPTY CHECK LEFT
	CALL	CURSORLOCINC	;INCREASE CURSOR LOC IN CASE WE ARE PRINTING A STAR
	CALL	DELAY1
	CALL	PRINTPOINTER	;PRINT POINTER
	CALL	CURSORLEFT		;MOVE CURSOR TO LEFT AFTER IT HAS BEEN MOVED RIGHT IN PRINT
	MOVLW	B'10100010'		;STORE "*" IN MEMORY
	MOVWF	INDF
	GOTO	CHECKRIGHT		;CHECK RIGHT AGAIN

RIGHTTOLEFT
	DECF	FSR,F			;DECREMENT FSR AFTER HAS BEEN INCREMENTED LOOKING RIGHT
CHECKLEFT
	DECF	FSR,F			;LOOKING LEFT
	MOVLW	D'15'
	SUBWF	FSR,W
	BTFSC	STATUS,Z		;CHECK IF IT IS THE FIRST POSTION OF  THE FIRST LINE
	GOTO	LEFTTODOWN		;IF IT IS GO CHECK UP OR DOWN DEPENDING ON THE LINE POSITION
	MOVLW	D'25'			
	SUBWF	FSR,W
	BTFSC	STATUS,Z		;CHECK IF IT IS THE FIRST POSTION OF  THE SECOND LINE
	GOTO	LEFTTOUP		;IF IT IS GO CHECK UP OR DOWN DEPENDING ON THE LINE POSITION
	MOVLW	B'01010100'
	SUBWF	INDF,W
	BTFSC	STATUS,Z		;CHECK IF THE LEFT POSITION IS AN "E"
	GOTO	DONE			;IF IT IS THEN DONE
	MOVLW	B'11110101'
	SUBWF	INDF,W 
	BTFSS	STATUS,Z		;CHECK IF IT IS EMPTY
	GOTO	UPORDOWN		;IF IT IS NOT GO CHECK UP OR DOWN DEPENDING ON THE LINE POSITION
	CALL	CURSORLOCDEC	;UPDATE CURSOR LOC
	CALL	DELAY1		
	CALL	PRINTPOINTER	;PRINT POINTER
	CALL	CURSORLEFT		;MOVE CURSOR TO LEFT AFTER IT HAS BEEN MOVED RIGHT IN PRINT
	MOVLW	B'10100010'
	MOVWF	INDF			;STORE "*" IN MEMORY
	GOTO	CHECKLEFT		;CHECK LEFT AGAIN
UPORDOWN
	BTFSC	CURSORLOC,2		;IF THIRD BIT OF CURSORLOC IS SET THEN WE ARE ON THE SECOND LINE GO UP
	GOTO	LEFTTOUP
	GOTO	LEFTTODOWN		;ELSE GO DOWN
LEFTTOUP
	INCF	FSR,F			;INCREMENT	FSR AFTER IF IT HAS BEEN DECREMENTED LOOKING LEFT
CHECKUP
	MOVLW	D'10'
	SUBWF	FSR,1			;DECREMENT FSR BY 10 TO CHECK UP
	MOVLW	B'01010100'	
	SUBWF	INDF,W
	BTFSC	STATUS,Z		;CHECK IF THE UP POSITION IS AN "E"
	GOTO	DONE			;IF IT IS THEN DONE
	MOVLW	B'11110101'
	SUBWF	INDF,W
	BTFSS	STATUS,Z		;CHECK IF IT IS EMPTY
	GOTO	BLOCKUP			;IF IT IS NOT THEN BLOCK CURRENT POSITION
	MOVLW	04				;IF IT IS EMPTY
	SUBWF	CURSORLOC,1		;DECREMENT CURSORLOC BY 4 (PREVIOUS LINE)
	MOVF	CURSORLOC,W
	CALL	SETADD
	CALL	DELAY1
	CALL	PRINTPOINTER	;PRINT STAR
	CALL	CURSORLEFT		;MOVE CURSOR TO LEFT AFTER IT HAS BEEN MOVED RIGHT IN PRINT
	MOVLW	B'10100010'		;UPDATE MEMORY
	MOVWF	INDF
	GOTO	CHECKRIGHT
LEFTTODOWN
	INCF	FSR,F
CHECKDOWN

	MOVLW	D'10'
	ADDWF	FSR,1			;INCREMENT FSR BY 10 TO CHECK DOWN
	MOVLW	B'01010100'
	SUBWF	INDF,W
	BTFSC	STATUS,Z		;CHECK IF THE DOWN POSITION IS AN "E"
	GOTO	DONE			;IF IT IS THEN DONE
	MOVLW	B'11110101'
	SUBWF	INDF,W
	BTFSS	STATUS,Z		;CHECK IF IT IS EMPTY
	GOTO	BLOCKDOWN		;IF IT IS NOT THEN BLOCK CURRENT POSITION
	MOVLW	04				;IF IT IS EMPTY
	ADDWF	CURSORLOC,1		;INCREMENT CURSORLOC BY 4 (NEXT LINE)
	MOVF	CURSORLOC,W
	CALL	SETADD
	CALL	DELAY1
	CALL	PRINTPOINTER	;PRINT STAR
	CALL	CURSORLEFT		;MOVE CURSOR TO LEFT AFTER IT HAS BEEN MOVED RIGHT IN PRINT
	MOVLW	B'10100010'		;UPDATE MEMORY
	MOVWF	INDF
	GOTO	CHECKRIGHT
	
BLOCKDOWN
	MOVLW	D'10'			;IF IT IS COMING TO BLOCK FROM CHECK DOWN
	SUBWF	FSR,1			;DECREMENT FSR BY 10 TO RESTORE AFTER LOOKING DOWN
	GOTO	BLOCK
BLOCKUP
	MOVLW	D'10'			;IF IT IS COMING TO BLOCK FROM CHECK UP
	ADDWF	FSR,1			;INCREMENT FSR BY 10 TO RESTORE AFTER LOOKING UP
BLOCK
	CALL	DELAY1
	MOVLW	B'00110101'
	SUBWF	INDF,W
	BTFSC	STATUS,Z		;CHECK IF THE POSITION TO BE BLOCKED IS THE START
	GOTO	PATHX			;IF YES PRINT PATHX
	MOVLW	B'11111111'
	MOVWF	INDF			;UPADTE MEMORY
	CALL	PRINT			;PRINT BLOCK
	MOVLW	0F				;FSR TO 15
	MOVWF	FSR
REMOVESTARS
	INCF	FSR,F			;SEARCHING FOR STARS TO REMOVE
	MOVLW	D'36'			
	SUBWF	FSR,W
	BTFSC	STATUS,Z		;CHECK IF WE ARE AT LAST CHARACTER OF SECOND LINE
	GOTO	RESE			;IF YES	RESTART ALGORITHM
	MOVLW	B'10100010'
	SUBWF	INDF,W
	BTFSS	STATUS,Z		;CHECK IF IT IS STAR
	GOTO	REMOVESTARS		;IF NOT CONTINUE LOOPING
	MOVLW	B'11110101'		
	MOVWF	INDF			;IF IT IS STAR REPLACE BY "_"
	GOTO	REMOVESTARS
RESE
	CALL	CLEARDISP		;CLEAR DISPLAY
	CALL	PRINTDISP		;PRINT DISPLAY
	CALL	INCREMENTITR	;INCREMENT ITERATIONS
	GOTO	RESTART			;RESTART ALGORITHM

DONE
	MOVLW	H'BC'
	CALL	SETADD
	CALL	PATH			;PRINT PATH* AT APPROPRIATE LOCATION
	CALL	PRINTPOINTER
	BSF	PORTB,3
	GOTO	RESTARTGAME

INCREMENTITR
	MOVLW	B'10010011'		
	SUBWF	ITR1,W
	BTFSC	STATUS,Z		;CHECK IF ITR1 IS 9
	GOTO	INCREMENTITR2	;IF YES INCREMENT SECOND DIGIT
	MOVLW	10				;ELSE INCREMENT ITR1
	ADDWF	ITR1,F
	GOTO	ITRPRT			;PRINT ITRT
INCREMENTITR2
	MOVLW	B'00000011'		;SET ITR1 TO 0
	MOVWF	ITR1
	MOVLW	10				;INCREASE ITR2
	ADDWF	ITR2,F
ITRPRT		;PRINT ITR WOTH NUMBER AT APPROPRIATE LOACTION
	MOVLW	H'B8'
	CALL	SETADD
	MOVLW	B'10010100';"I'
	CALL	PRINT
	MOVLW	B'01000101';"T"
	CALL	PRINT
	MOVLW	B'00100101';"R"
	CALL	PRINT
	MOVF	ITR2,W
	CALL	PRINT
	MOVF	ITR1,W
	CALL	PRINT
	RETURN
	
	
	
	;====IN CASE PATH IS NOT FOUND
PATHX		
		;====PRINT PATHX
	MOVLW	H'BC'
	CALL	SETADD	
	CALL	PATH
	MOVLW	B'10000101';X
	CALL	PRINT
		;===========
	BSF	PORTB,2	;TURN ON RED LED
	BSF	PORTB,0	;TURN ON BUZZER
	CALL	DELAY4	;DELAY
	BCF	PORTB,0	;TURN OFF BUZZER
	GOTO	RESTARTGAME
	;=============================

RESTARTGAME	;RESTART GAME
	CALL	DELAY3
	CALL	CLEARDISP
	BSF	DONEALG,0
	GOTO	RETRB
	
CURSORLOCINC	 ;UPDATE CURSORLOC AND MOVE IT TO THE RIGHT
	MOVLW	10
	ADDWF	CURSORLOC,1
	CALL	CURSORRIGHT
	RETURN
	
CURSORLOCDEC	;UPDATE CURSORLOC AND MOVE IT TO THE LEFT
	MOVLW	10
	SUBWF	CURSORLOC,1
	CALL	CURSORLEFT
	RETURN
	
MAZE
	MOVLW	B'11010100';"M"
	CALL	PRINT
	CALL	APRINT
	MOVLW	B'10100101';"Z"
	CALL	PRINT
	CALL	EPRINT
	RETURN
PATH
	MOVLW	B'00000101';"P"
	CALL	PRINT
	CALL	APRINT
	MOVLW	B'01000101';"T"
	CALL	PRINT
	MOVLW	B'10000100';"H"
	CALL	PRINT
	RETURN
SPRINT
	MOVLW	B'00110101';"S"
	CALL	PRINT
	RETURN
EPRINT
	MOVLW	B'01010100';"E"
	CALL	PRINT
	RETURN
APRINT
	MOVLW	B'00010100';"A"
	CALL	PRINT
	RETURN
OPRINT
	MOVLW	B'11110100';"O"
	CALL	PRINT
	RETURN
	
	;=======FUNCTION THAT PRINTS CHARACTER GIVEN IN W
PRINT
	MOVWF	COUNT3		;STORE W IN COUNT3 AS TEMP
	MOVWF	PORTA		;MOVE 5 LSB FROM W TO PORTA
	BSF		PORTA,4		;SET MSB OF PORTA (TO PRINT)
	CALL	ETPRINT
	SWAPF	COUNT3,W	;SWAP 4 MSB AND 4 LSB OF COUNT3
	MOVWF	PORTA		;MOVE 5 LSB FROM W TO PORTA
	BSF		PORTA,4		;SET MSB OF PORTA (TO PRINT)
	CALL	ETPRINT
	RETURN
	;===============================
	
	;=====FUNCTION THAT SETS THE ADDRESS GIVEN IN W
SETADD
	MOVWF	COUNT3		;STORE W IN COUNT3 AS TEMP
	MOVWF	PORTA		;MOVE 5 LSB FROM W TO PORTA
	BCF		PORTA,4		;CLEAR MSB OF PORTA (TO SETADDRESS)
	CALL	ET
	SWAPF	COUNT3,W	;SWAP 4 MSB AND 4 LSB OF COUNT3
	MOVWF	PORTA		;MOVE 5 LSB FROM W TO PORTA
	BCF		PORTA,4		;CLEAR MSB OF PORTA (TO SETADDRESS)
	CALL	ET
	RETURN
	;================================
	
	;===FUNCTION THAT FILLS THE MEMORY REGISTERS WITH "_"
FILLDASH
	MOVLW	D'16'
	MOVWF	FSR
LOOPDASH
		MOVLW	B'11110101'
		MOVWF	INDF
		INCF	FSR,F
		MOVF	FSR,W
		SUBLW	D'36'
		BTFSS	STATUS,Z
		GOTO	LOOPDASH
	RETURN
	;============================
PRINTDISP
	MOVLW	D'16' ;FSR ON FIRST REGISTER 
	MOVWF	FSR
LOOPPRINT	MOVF	INDF,W ; MOVE CONTENTS OF THE FIRST REGISTER TO W AND PRINT 
		CALL	PRINT
		INCF	FSR,F
		MOVF	FSR,W
		SUBLW	D'26'
		BTFSC	STATUS,Z ; IF WE REACH THE END OF THE FIRST LINE, WE GO TO THE NEXT LINE 
		CALL	SKIP10
		MOVF	FSR,W
		SUBLW	D'36'
		BTFSS	STATUS,Z ; IF WE REACH THE END OF THE SECOND LINE BREAK!
		GOTO	LOOPPRINT
		RETURN
		;=== FUNCTION THAT CHANGES THE ADDRESS TO 40 AND SAVE THE FSR VALUE IN TEMP WHILE ADDING 25 AFTER THE SUBTRACTION 
SKIP10	ADDLW	D'25'
		MOVWF	TEMP
		MOVLW	B'00001100'
		CALL	SETADD
		MOVF	TEMP,W
		RETURN		
CLEARDISP ;=== FUNCTION THAT CLEARS THE DISPLAY 
	MOVLW	B'00000'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'00001'
	MOVWF	PORTA
	Call	ET
	RETURN
	
	
PRINTPOINTER	;PRINT STAR
	MOVLW	B'10100010';"*"
	CALL	PRINT
	RETURN
BLINKON		;TURN ON BLINK AND CURSOR
	MOVLW	B'00000'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'01111'
	MOVWF	PORTA
	Call	ET
	RETURN
BLINKOFF	;TURN OFF BLINK AND CURSOR
	MOVLW	B'00000'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'01100'
	MOVWF	PORTA
	Call	ET
	RETURN

CLEARCHAR	;PRINT SPACE
	MOVLW	B'11101111';" "
	CALL	PRINT
	RETURN

	
	;=== MOVE THE CURSOR RIGHT OR LEFT WITH FUNCTIONS GIVEN BY THE MANUAL 
CURSORLEFT 
	MOVLW	B'00001'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'00000'
	MOVWF	PORTA
	Call	ET
	RETURN
CURSORRIGHT
	MOVLW	B'00001'
	MOVWF	PORTA
	Call	ET
	MOVLW	B'00100'
	MOVWF	PORTA
	Call	ET
	RETURN
	
	;============================
	
RETRB ;RETURN FROM INTERUPT COMING FROM RB 
	BCF	INTCON,RBIF
	RETFIE
RETT0 ;RETURN FROM INTERRUPT COMING FROM TIMER0
	BCF	INTCON,T0IF
	RETFIE
	
	
	;=====DELAYS========================
DELAY1	
	MOVLW	H'00'
	MOVWF	COUNT2
	MOVLW	0x34
	MOVWF	COUNT1
LOOP1
	INCFSZ	COUNT2,F
	GOTO	LOOP1
	DECFSZ	COUNT1,F
	GOTO	LOOP1
	RETURN
DELAY2
	MOVLW	0xFF
	MOVWF	COUNT1
LOOP2
	NOP
	NOP
	DECFSZ	COUNT1,F
	GOTO	LOOP2
	RETURN
DELAY3
	MOVLW	H'00'
	MOVWF	COUNT3
	MOVLW	H'00'
	MOVWF	COUNT2
	MOVLW	0x33
	MOVWF	COUNT1
LOOP3
	INCFSZ	COUNT3,F
	GOTO	LOOP3
	INCFSZ	COUNT2,F
	GOTO	LOOP3
	DECFSZ	COUNT1,F
	GOTO	LOOP3
	RETURN
DELAY4
	MOVLW	H'00'
	MOVWF	COUNT3
	MOVLW	H'00'
	MOVWF	COUNT2
	MOVLW	0x0A
	MOVWF	COUNT1
LOOP4
	INCFSZ	COUNT3,F
	GOTO	LOOP4
	INCFSZ	COUNT2,F
	GOTO	LOOP4
	DECFSZ	COUNT1,F
	GOTO	LOOP4
	RETURN
ET	BSF	PORTB,1
	NOP
	BCF	PORTB,1
	Call	DELAY1
	RETURN
ETPRINT
	BSF	PORTB,1
	NOP
	BCF	PORTB,1
	Call	DELAYPRINT
	RETURN
DELAYPRINT	
	MOVLW	0xF9
	MOVWF	COUNT1
LOOPETPRINT
	DECFSZ	COUNT1,F
	GOTO	LOOPETPRINT
	RETURN
	;================================
	
	END